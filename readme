Day-1
Java Core:
    1. What is the difference between == and .equals() in Java? - EqualsDemo.java
    2. Explain the difference between checked and unchecked exceptions. Provide examples.
    3. How does Java achieve platform independence?
    4. What is the difference between String, StringBuilder, and StringBuffer?
    5. How does garbage collection work in Java, and what are the different types of garbage collectors?

Logical/Coding Questions:
    1. Write a program to check if a number is a palindrome or not.
    2. Given an array of integers, find the second largest number without sorting.
    3. Write a Java program to reverse a string without using in-built functions.
    4. How do you detect and remove a loop in a linked list in Java?
    5. Write a Java program to find the first non-repeating character in a string.

Day-2
Java core.
What is the difference between ArrayList and LinkedList in Java?
Explain the concept of autoboxing and unboxing in Java.
What is the role of the transient keyword in Java?
What is the volatile keyword in Java, and how is it used?
What is the difference between final, finally, and finalize in Java?
Explain the difference between super and this in Java.
What is the purpose of the default keyword in interfaces (introduced in Java 8)?\

Logical/Coding Questions – 6 Questions
Write a program to find all prime numbers in a given range.
Write a program to find the Fibonacci series up to n terms using recursion.
Given an array of integers, write a program to move all zeros to the end while maintaining the relative order of non-zero elements.
Write a program to check if two strings are anagrams of each other.
Write a program to find the sum of the digits of a number using recursion.
Find the largest sum of a contiguous subarray in an array of integers.

Java OOP Questions – 7 Questions
What is the difference between method overloading and method overriding in Java?
What are abstract classes and interfaces in Java? How are they different from each other?
Explain the concept of inheritance in Java. How does it work with access modifiers?
What are the key differences between composition and inheritance in Java?
What is the purpose of the static keyword in Java? How does it work with methods and variables?
Explain the concept of polymorphism in Java. Provide examples of both compile-time and runtime polymorphism.
What is encapsulation in Java, and how can it be achieved?

day-3
Spring boot.
** Core Spring Boot Concepts: **
    What is Spring Boot and how does it differ from Spring Framework?
    
    What is the advantage of using Spring Boot over traditional Spring?
    
    What are some of the key features of Spring Boot?
    
    What is the purpose of the @SpringBootApplication annotation?
    
    How does Spring Boot auto-configuration work?
    
    How can you disable specific auto-configurations in Spring Boot?
    
    What is the Spring Boot starter project and how is it used?
    
    What is Spring Boot''s embedded web server, and which servers can be embedded?
    
    What is the role of the application.properties or application.yml file in Spring Boot?
    
    How do you create a custom Spring Boot starter?

**  Spring Boot Configuration: **
    What are profiles in Spring Boot and how are they used?

    How do you externalize configuration in Spring Boot?

    What is the difference between @ConfigurationProperties and @Value annotation in Spring Boot?

    How do you enable and configure a datasource in Spring Boot?

    What is the purpose of @EnableAutoConfiguration in Spring Boot?

**  Spring Boot and Databases: **
    How do you configure a Spring Boot application to connect to a database (e.g., MySQL, PostgreSQL)?
    
    What is Spring Data JPA, and how is it used in Spring Boot?
    
    How do you configure pagination and sorting with Spring Data JPA?
    
    What are @Entity, @Repository, and @Service annotations in Spring Boot and how do they work together?
    
    How can you handle database migrations in a Spring Boot application (e.g., using Flyway or Liquibase)?

** Spring Boot Security: ** 
    How do you secure a Spring Boot application using Spring Security?
    
    What is the purpose of the @EnableWebSecurity annotation in Spring Boot?
    
    How do you implement JWT (JSON Web Token) authentication in Spring Boot?
    
    What is the difference between authentication and authorization in Spring Security?
    
    How can you configure role-based access control (RBAC) in Spring Security?

**  Spring Boot REST APIs: ** 
    How do you create a RESTful web service using Spring Boot?
    
    What is the purpose of @RestController in Spring Boot?
    
    What is the difference between @Controller and @RestController?
    
    How can you handle exceptions globally in Spring Boot REST APIs?
    
    How do you configure JSON and XML message converters in Spring Boot?

**  Spring Boot Testing: **
    How do you write unit tests for Spring Boot applications?

    What is the purpose of @SpringBootTest annotation?

    How do you mock dependencies in Spring Boot tests?

    What is the role of @MockBean in testing a Spring Boot application?

    How do you test a Spring Boot REST controller using @WebMvcTest?

**  Spring Boot Advanced Topics: **
    What is Spring Boot Actuator, and how can it be used to monitor applications?

    How do you customize Spring Boot Actuator endpoints?

    How do you create and use custom Spring Boot health indicators?

    How can you integrate Spring Boot with message brokers like RabbitMQ or Kafka?

    How do you configure Spring Boot for distributed tracing and logging (e.g., using Zipkin or ELK)?

25 Interview Questions Based on the JD
** Java and Technical Knowledge (15 Questions) **

What features of Java 8 or later have you used in your previous projects? Can you provide examples?
How do you handle version control using Git or other version management tools? Can you explain your process?
Can you explain the difference between ArrayList and LinkedList in Java? When would you choose one over the other?
How would you go about debugging a Java application that is throwing memory leaks or performance issues?
How do you implement error handling in a Java application? What are the common practices you follow for exception handling?
Explain the concept of functional interfaces and lambda expressions in Java 8.
What is the significance of streams in Java 8, and how do you utilize them to write efficient code?
How do you use SQL with Java applications? Can you describe how you interact with databases like Oracle or MongoDB from Java?
Explain how you would implement a multi-threaded Java application. What tools do you use to manage concurrency in Java?
How do you ensure that your Java code is testable? Can you explain your approach to unit testing?
What are some best practices when developing enterprise applications in Java, especially regarding scalability and performance?
How do you handle versioning in Java APIs when there are breaking changes or updates in the application?
Can you describe a situation where you used event-driven architecture in your Java projects? How did it benefit the system?
Have you worked with CI/CD pipelines? Can you walk us through the steps of deploying a Java application using CI/CD?
Can you discuss your experience with Oracle databases? How do you interact with Oracle databases in a Java application?

** Spring - **
What is Dependency Injection in Spring? Can you explain how you’ve used it in your projects?

	This will test your understanding of one of the core concepts of Spring — Dependency Injection (DI) and how it helps in decoupling components.
	Can you explain the difference between @Component, @Service, @Repository, and @Controller annotations in Spring?

	This question will assess your knowledge of Spring annotations and their roles in creating different beans.

What is Spring Boot, and how is it different from traditional Spring Framework applications?

	This checks your understanding of Spring Boot, its purpose, and how it simplifies the development and deployment of Spring applications.
	How would you handle transactions in a Spring-based application? Can you explain @Transactional and its use cases?

	This question tests your understanding of managing transactions in Spring and how Spring handles transaction management declaratively.
	
Have you worked with Spring Security? Can you explain how you would implement authentication and authorization in a Spring application?

	This assesses your familiarity with securing web applications using Spring Security and implementing user authentication/authorization.

** Behavioral and Collaborative Skills (5 Questions) **

Can you give an example of a time you worked in an agile environment? How did you handle the iterative development process?
How do you manage your time when working with teams distributed across different time zones?
Describe a time when you faced a challenging problem in a project. How did you approach solving it?
Have you worked in a collaborative environment? How do you ensure smooth communication when working with developers in multiple locations?
How do you handle situations where the requirements are unclear or constantly changing? How do you adapt to those changes?
Testing and Quality (3 Questions)

What types of testing have you performed in your Java applications? Can you explain your experience with unit and integration testing?
How do you ensure that your code meets the required performance benchmarks? Do you perform any performance testing or optimization?
Can you explain your approach to writing clean, maintainable, and efficient Java code? How do you ensure it adheres to best practices?
Problem-Solving and Architecture (2 Questions)

Can you describe a situation where you had to troubleshoot a production issue? How did you investigate and resolve it?
How do you design reusable frameworks in Java? Can you give an example of a framework you developed and how it helped improve productivity?